------ cookies -------
session - django middleware requires, can acquire from any response from server
csrf token - django middleware requires, can acquire from any response from server

------ UTILITIES ------
'GET'{site}/admin/                
	DB Administration - This is package provided by Django for a interface for interacting with DB components. Website accessible.

'GET'{site}/status/                
	Status report of server, will send 200 ok or 500 internal service error
	
'POST' {site}/api/auth/signup/ body={username="ex_user",password1="pass_example",password2="pass_example"}
	Generic signup route - Include username, password x2 (verification), returns Device Token
      
'POST' {site}api/auth/obtain/ body={username="ex_user",password="pass_example"}
	Returns device token of registered user in case needed

'POST' {site}/api/auth/login/ body={username="ex_user",password="pass_example"}
	Login user using user name and password... to replace with device token?

'POST' {site}/api/auth/logout/
	Logout user, deletes web session but leaves data saved on server

'POST' {site}/api/auth/del-logout/ 
	Logout user, deletes web session and removes all data from server

'JWT' {site}/api/jwt/ headers={"Authorization": "Token fdhaf92fnq309f"}
 	JWT token obtain - Include header with device token, returns a JWT token and a refresh token

'POST' {site}/api/jwt/refresh/ body={"refresh": "example_refresh_token"}
 	JWT token refresh - use refresh token obtained from api/jwt/ to refresh JWT

'POST' {site}/api/jwt/verify/ body={"token": "example_jwt_token"}
 	JWT token refresh - use refresh token obtained from api/jwt/ to refresh JWT




------ INTEGERS ------
INTEGER UNIT (where index is position in set starting at zero, {x0,x1,x2,...})
{"index":0,"X":1,"q":1}

'GET' {site}/integers/set/ 
cookies = {
	"sessionid":"ex_session_id"
	"csrftoken":"token_returned_from_server"
}
header = {
	"Authorization":"Bearer t0k3n_h4sh..."
}
body = {
	"user_id":"56ed72b87ca333f02ef5eaef99296194768c5488",
	"session_id":"session_example",
	"set_id":"set_id_example"
	}


'POST' {site}/integers/set/ 
cookies = {
	"sessionid":"ex_session_id"
	"csrftoken":"token_returned_from_server"
}
header = {
	"Authorization":"Bearer t0k3n_h4sh..."
}
body= {
	"integers":[{index":0,"X":1,"q":1},{"index":1,"X":2,"q":2},{"index":2,"X":3,"q":3}]
	}

'DELETE' {site}/integers/set/
cookies = {
	"sessionid":"ex_session_id"
	"csrftoken":"token_returned_from_server"
}
header = {
	"Authorization":"Bearer t0k3n_h4sh..."
}
body= {
	"set_id":"old_set_id"
}


'POST' {site}/integers/operation/ 
cookies = {
	"sessionid":"ex_session_id"
	"csrftoken":"token_returned_from_server"
}
header = {
	"Authorization":"Bearer t0k3n_h4sh..."
}
body = {
	"equation":"first_set+second_set"
	}


'GET' {site}/integers/session/
cookies = {
	"sessionid":"ex_session_id"
	"csrftoken":"token_returned_from_server"
}
header = {
	"Authorization":"Bearer t0k3n_h4sh..."
}
body = {
	"session_id":"old_or_current_session_id"
	}


'POST' {site}/integers/session/
cookies = {
	"sessionid":"ex_session_id"
	"csrftoken":"token_returned_from_server"
} 
header = {
	"Authorization":"Bearer t0k3n_h4sh..."
}
body = {
    "session_id":"old_session_example",
    "integer_sets":[{
        "set_id":"posted_session_set",
        "integers":[{"index":1,"X": 1,"q":1},{"index":2,"X": 2,"q":2}]
    	},
	{"set_id":"posted_session_set2",
        "integers":[{"index":1,"X": 12,"q":12},{"index":2,"X": 22,"q":22}]
	}]
}	


'DELETE' {site}/integers/session/
cookies = {
	"sessionid":"ex_session_id"
	"csrftoken":"token_returned_from_server"
}
header = {
	"Authorization":"Bearer t0k3n_h4sh..."
}
body= {
	"sessioin_id":"old_or_current_session_id"
}








