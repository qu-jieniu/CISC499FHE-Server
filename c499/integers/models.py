# Django
from django.db import models

# DRF
from rest_framework.authtoken.models import Token 

# Project
from utils.utils import Base64Field

# PersistentSessions represent a session stored in the database
# do not get deleted if browser session ends
# will get deleted if logout-del route is taken
class PersistentSession(models.Model):
    # session_id is same as sessionid from cookies
    # not foreign key as causes too much hassle
    # since django has middleware handle browser sessions
    session_id = models.CharField(max_length=40,primary_key=True) 
    
    # user_id points to auth token
    user_id = models.ForeignKey(Token,on_delete=models.CASCADE,related_name="sessions")

    # define string format 
    def __str__(self):
        return "%s (%s)" % (self.session_id,self.user_id.key[:5])

# IntegerSets are used to store essentially a list of all sets
# makes deleting actual integers simpler using on_delete=CASCADE 
class IntegerSet(models.Model):
    # set_id is identifier for a set, it is the hex
    #  of a randomly generated, to ensure uniqueness on server side
    set_id = models.CharField(max_length=40,primary_key=True)
    
    # all integers point to session, again to simplify deletion
    session_id = models.ForeignKey(PersistentSession,on_delete=models.CASCADE,related_name="integer_sets")

    # define string format
    def __str__(self):
        return self.set_id

# Integers are the core model of the database
class Integer(models.Model):
    class Meta:
        # Django/DRF offer no multi-field PK, so
        # will use autogenerated PK, then ensure
        # uniqueness 
        unique_together = (("set_id","index"),) 
        ordering = ['set_id','index']
        
    # set_id is foreign key to simplify deletion
    set_id = models.ForeignKey(IntegerSet,related_name="integers",on_delete=models.CASCADE)
    
    # index is an integer field to ensure order does not mix up
    index = models.IntegerField(default=0)
    
    # X & q are binary fields encoded in base64 for large numbers 
    X = models.BinaryField() 
    q = models.BinaryField()

    # format string
    def __str__(self):
        return "%s[%d]" % (self.set_id.set_id,self.index)



